<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Imperceptible Thoughts]]></title>
  <link href="http://johnrengelman.github.io/atom.xml" rel="self"/>
  <link href="http://johnrengelman.github.io/"/>
  <updated>2014-12-18T15:16:29-06:00</updated>
  <id>http://johnrengelman.github.io/</id>
  <author>
    <name><![CDATA[John Engelman]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Yet Another Blog Hosting Change]]></title>
    <link href="http://johnrengelman.github.io/blog/2014/02/05/yet-another-blog-hosting-change/"/>
    <updated>2014-02-05T09:12:38-06:00</updated>
    <id>http://johnrengelman.github.io/blog/2014/02/05/yet-another-blog-hosting-change</id>
    <content type="html"><![CDATA[<p>Only a few months ago, I decided to switch my personal blog (which isn&rsquo;t maintained very well)
from a privately hosted Wordpress installation on a server in my basement to Tumblr. There
were a lot of reasons for this but the biggest was, I&rsquo;m not very interested in maintaining that
server anymore.</p>

<!-- more -->


<p>Tumblr has ben ok. But I&rsquo;ve found that, I don&rsquo;t like any blogging platform where I have to link
to an external page to get source code included in the blog post (lame/too much effort). The
obvious choice to correct this was to use something based on Markdown so I can write code
inline. And that inevitably led me to using Github Pages.</p>

<p>That&rsquo;s all well and good, but Github Pages doesn&rsquo;t provided any type of default scheming, you
are responsible for everything. That&rsquo;s cool if you&rsquo;re into that kind of stuff, but CSS and
skinning has never been a strong suite of mine. So, I needed something with some generic, yet
good looking templates. In comes Octopress.</p>

<p>I&rsquo;m just starting to learn the ropes here, so I&rsquo;ll be doing a lot to play with this platform
before finally switching the DNS record over, but so far I&rsquo;m happy.</p>

<p>More to come!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Grails-Gradle Plugin 2.0.0 Released]]></title>
    <link href="http://johnrengelman.github.io/blog/2014/01/27/grails-gradle-plugin-200-released/"/>
    <updated>2014-01-27T12:09:47-06:00</updated>
    <id>http://johnrengelman.github.io/blog/2014/01/27/grails-gradle-plugin-200-released</id>
    <content type="html"><![CDATA[<p>I am happy to announce that the 2.0.0 release for the Grails-Gradle plugin has finally been released.</p>

<p>This release has been a long time coming, and offers some significant improvements over the 1.1.0 release. Additionally, many people have been relying on the 2.0.0-SNAPSHOT release and this locks-in a stable version that is now available in Maven Central and the Grails Central repositories.</p>

<p><strong>ChangeLog</strong></p>

<ul>
<li>Automatic configuration of Grails repositories using <code>grails.central()</code> in your <code>repositories</code> block</li>
<li>Automatic configuration of Grails, Groovy, and Spring Loaded versions</li>
<li>Implementation of a build task structure more similar to a standard Java project (i.e. clean, build, assemble, test, check ,etc.)</li>
<li>Better integration with IntelliJ IDEA (plugin source is now available)</li>
<li>Definition of Grails source sets to allow for task input/output configuration</li>
<li>Various bug fixes and improvements in Grails command spawning.</li>
</ul>


<p>Additional information can be found on the plugin&rsquo;s Github <a href="https://github.com/grails/grails-gradle-plugin">page</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Reproducible Multi-Project Gradle builds (Part 2)]]></title>
    <link href="http://johnrengelman.github.io/blog/2013/12/20/reproducible-multi-project-gradle-builds-part-2/"/>
    <updated>2013-12-20T10:02:15-06:00</updated>
    <id>http://johnrengelman.github.io/blog/2013/12/20/reproducible-multi-project-gradle-builds-part-2</id>
    <content type="html"><![CDATA[<p>Follow up to my previous post - <a href="http://imperceptiblethoughts.com/post/70296784559/reproducible-multi-project-gradle-builds">Reproducible Multi-Project Gradle builds</a></p>

<p>I got around to doing some testing on this using a simple Gradle project. Very quickly did I find out that this particular strategy was not going to be easy&hellip;.and potentially impossible.</p>

<h2>Problem 1 - Setting Timestamp value on Jar Entry&rsquo;s</h2>

<p>The first problem I ran into was actually setting the timestamp value of a Jar Entry. My first attempt looked something like this:</p>

<div><script src='https://gist.github.com/8055368.js?file=build-1a.gradle'></script>
<noscript><pre><code>jar {
        doLast {
            long ts = fileTree('.') {
                exclude 'build/**'
            }.files.sort {
                -(it.lastModified())
            }.first().lastModified()
            JarFile jf = new JarFile(archivePath)
            jf.entries().each { entry -&gt;
                entry.time = ts
            }
            jf.close()
        }
}</code></pre></noscript></div>


<p>Yup. That didn&rsquo;t work. Jar&rsquo;s are more or less read-only. So in order to change the time stamp, I needed to write out a new Jar file with the modified entries. Basically, create a new jar file, iterate over the entries from the first jar file, clone them, modified the time stamp, add the cloned entry to the new jar file and then binary copy the data from the first jar file to the second. It looks something like this:</p>

<!-- more -->




<div><script src='https://gist.github.com/8055368.js?file=build-1b.gradle'></script>
<noscript><pre><code>jar {
        doLast {
            long ts = fileTree('.') {
                exclude 'build/**'
            }.files.sort {
                -(it.lastModified())
            }.first().lastModified()
            File newJar = new File(archivePath.parent, 'new-' + archiveName)
            JarOutputStream jos = new JarOutputStream(new FileOutputStream(newJar))
            JarFile jf = new JarFile(archivePath)
            jf.entries().each { entry -&gt;
                cloneAndCopyEntry(jf, entry, jos, ts)
            }
            jos.finish()
            jf.close()
        }
}

void cloneAndCopyEntry(JarFile originalFile, JarEntry original, JarOutputStream jos, long newTimestamp) {
        JarEntry clone = new JarEntry(original)
        clone.time = newTimestamp
        def entryIs = originalFile.getInputStream(original)
        jos.putNextEntry(clone)
        copyBinaryData(entryIs, jos)
}

void copyBinaryData(InputStream is, JarOutputStream jos) {
        byte[] buffer = new byte[1024]
        int len = 0
        while((len = is.read(buffer)) != -1) {
            jos.write(buffer, 0, len)
        }        
}</code></pre></noscript></div>


<h2>Problem 2 - JAR &ldquo;Magic&rdquo; Extra Byte</h2>

<p>The next issue I encountered was that my new Jar file always had an entry that didn&rsquo;t match the original Jar for it&rsquo;s &lsquo;extra&rsquo; property. <code>JarEntry.geExtra()</code> returns a <code>byte[]</code>. In the orignal file, this was null, but in my copied file it was set to some data. I finally found that it is from the implementation of <a href="http://grepcode.com/file/repository.grepcode.com/java/root/jdk/openjdk/7-b147/java/util/jar/JarOutputStream.java">JarOutputStream</a> in Java.</p>

<p>This Jar MAGIC byte gets added to the first entry in the Jar file. I haven&rsquo;t been able to find any documentation on what it is for, but a friend thought it was likely for the Jar tool itself to determine if an archive file is actually a Jar.</p>

<p>Curiously, Jar files produced by the Gradle Jar task, do <strong>NOT</strong> have this magic byte. Digging into their code, I found that they use a <code>ZipOutputStream</code> to write out the Jar file which doesn&rsquo;t have this magic byte code. Using <code>ZipOutputStream</code> and <code>ZipEntry</code> works just as fine and avoids this, so we update the build to do the same:</p>

<div><script src='https://gist.github.com/8055368.js?file=build-2.gradle'></script>
<noscript><pre><code>jar {
        doLast {
            long ts = fileTree('.') {
                exclude 'build/**'
            }.files.sort {
                -(it.lastModified())
            }.first().lastModified()
            File newJar = new File(archivePath.parent, 'new-' + archiveName)
            ZipOutputStream zos = new ZipOutputStream(new FileOutputStream(newJar))
            JarFile jf = new JarFile(archivePath)
            jf.entries().each { entry -&gt;
                cloneAndCopyEntry(jf, entry, zos, ts)
            }
            zos.finish()
            jf.close()
        }
}

void cloneAndCopyEntry(JarFile originalFile, JarEntry original, ZipOutputStream zos, long newTimestamp) {
        ZipEntry clone = new ZipEntry(original)
        clone.time = newTimestamp
        def entryIs = originalFile.getInputStream(original)
        zos.putNextEntry(clone)
        copyBinaryData(entryIs, zos)
}

void copyBinaryData(InputStream is, ZipOutputStream zos) {
        byte[] buffer = new byte[1024]
        int len = 0
        while((len = is.read(buffer)) != -1) {
            zos.write(buffer, 0, len)
        }        
}</code></pre></noscript></div>


<h2>Problem 3 - Zip timestamp spec</h2>

<p>After all this, I still wasn&rsquo;t getting subsequent builds of the Jar to have matching checksums. I wrote a method that at the end of producing the timestamp adjusted Jar iterated over all the entries and compared all the fields to the original except the time field which I compared to the expected time stamp. Looks like this:</p>

<div><script src='https://gist.github.com/8055368.js?file=build-3a.gradle'></script>
<noscript><pre><code>jar {
        doLast {
            long ts = fileTree('.') {
                exclude 'build/**'
            }.files.sort {
                -(it.lastModified())
            }.first().lastModified()
            File newJar = new File(archivePath.parent, 'new-' + archiveName)
            ZipOutputStream zos = new ZipOutputStream(new FileOutputStream(newJar))
            JarFile jf = new JarFile(archivePath)
            jf.entries().each { entry -&gt;
                cloneAndCopyEntry(jf, entry, zos, ts)
            }
            zos.finish()
            jf.close()
            compareJars(archivePath, newJar, ts)
        }
}

void compareJars(File original, File copy, long ts) {
    def jf = new JarFile(original)
    def cjf = new JarFile(copy)
    jf.entries().each { entry -&gt;
        def centry = cjf.getJarEntry(entry.name)
        compareEntries(entry, centry, ts)
    }
}

void compareEntries(JarEntry entry, JarEntry centry, long ts) {
    assert entry.name == centry.name
    assert entry.comment == centry.comment
    assert entry.compressedSize == centry.compressedSize
    assert entry.crc == centry.crc
    assert entry.extra == centry.extra
    assert entry.method == centry.method
    assert entry.size == centry.size
    assert ts == centry.time
    assert entry.hashCode() == centry.hashCode()
}

void cloneAndCopyEntry(JarFile originalFile, JarEntry original, ZipOutputStream zos, long newTimestamp) {
        ZipEntry clone = new ZipEntry(original)
        clone.time = newTimestamp
        def entryIs = originalFile.getInputStream(original)
        zos.putNextEntry(clone)
        copyBinaryData(entryIs, zos)
}

void copyBinaryData(InputStream is, ZipOutputStream zos) {
        byte[] buffer = new byte[1024]
        int len = 0
        while((len = is.read(buffer)) != -1) {
            zos.write(buffer, 0, len)
        }        
}</code></pre></noscript></div>


<p>This showed me that some entries still didn&rsquo;t have the same timestamp. Curiously, they were always off by 1 second (1000 milliseconds in the script). Digging back into the Java source code for <a href="http://grepcode.com/file/repository.grepcode.com/java/root/jdk/openjdk/7-b147/java/util/zip/ZipEntry.java#ZipEntry.setTime%28long%29">ZipEntry</a>, I found it was doing some sort of unix - DOS conversion and was losing the resolution of the time.</p>

<p>After a call out to the Twitterverse, a friend pointed out that the <a href="http://ant.apache.org/manual/Tasks/zip.html">Zip Spec</a> specifies that Zip entries have a time resolution of 2 seconds:</p>

<blockquote><p>The <code>update</code> parameter controls what happens if the ZIP file already exists. When set to <code>yes</code>, the ZIP file is updated with the files specified. (New files are added; old files are replaced with the new versions.) When set to <code>no</code> (the default) the ZIP file is overwritten if any of the files that would be added to the archive are newer than the entries inside the archive. Please note that ZIP files store file modification times with a granularity of two seconds. If a file is less than two seconds newer than the entry in the archive, Apache Ant will not consider it newer.</p></blockquote>

<p>So, we need to mimic this same behavior when producing our new Jar. Basically, we need to convert our timestamp to a resolution of 2 seconds. It looks like this:</p>

<div><script src='https://gist.github.com/8055368.js?file=build-3b.gradle'></script>
<noscript><pre><code>jar {
        doLast {
            long ts = fileTree('.') {
                exclude 'build/**'
            }.files.sort {
                -(it.lastModified())
            }.first().lastModified()
            File newJar = new File(archivePath.parent, 'new-' + archiveName)
            ZipOutputStream zos = new ZipOutputStream(new FileOutputStream(newJar))
            JarFile jf = new JarFile(archivePath)
            jf.entries().each { entry -&gt;
                long adjustedTs = convertTimestamp(ts)
                cloneAndCopyEntry(jf, entry, zos, adjustedTs)
            }
            zos.finish()
            jf.close()
            compareJars(archivePath, newJar, ts)
        }
}

long convertTimestamp(long timestamp) {
    long seconds = timestamp / 1000
    if (seconds % 2 != 0) {
        seconds += 1
    }
    return 1000 * seconds
}

void compareJars(File original, File copy, long ts) {
    def jf = new JarFile(original)
    def cjf = new JarFile(copy)
    long adjustedTs = convertTimestamp(ts)
    jf.entries().each { entry -&gt;
        def centry = cjf.getJarEntry(entry.name)
        compareEntries(entry, centry, adjustedTs)
    }
}

void compareEntries(JarEntry entry, JarEntry centry, long ts) {
    assert entry.name == centry.name
    assert entry.comment == centry.comment
    assert entry.compressedSize == centry.compressedSize
    assert entry.crc == centry.crc
    assert entry.extra == centry.extra
    assert entry.method == centry.method
    assert entry.size == centry.size
    assert ts == centry.time
    assert entry.hashCode() == centry.hashCode()
}

void cloneAndCopyEntry(JarFile originalFile, JarEntry original, ZipOutputStream zos, long newTimestamp) {
        ZipEntry clone = new ZipEntry(original)
        clone.time = newTimestamp
        def entryIs = originalFile.getInputStream(original)
        zos.putNextEntry(clone)
        copyBinaryData(entryIs, zos)
}

void copyBinaryData(InputStream is, ZipOutputStream zos) {
        byte[] buffer = new byte[1024]
        int len = 0
        while((len = is.read(buffer)) != -1) {
            zos.write(buffer, 0, len)
        }        
}</code></pre></noscript></div>


<h2>Problem 4 - Groovy <code>_timestamp</code> static field</h2>

<p>This got my Jars closer, but they still weren&rsquo;t checksumming the same. At this point, I started using a hex viewer to compare the two files. I used <a href="http://ridiculousfish.com/hexfiend/">Hex Fiend</a> because it can do a side by side diff of files and is free</p>

<p>Using a Hex viewer on a Jar file doesn&rsquo;t do much since the data is compressed, but it can get you pointed in the right direction. In my cause I could see some byte differences around what appeared to be some class declarations</p>

<p><img src="http://johnrengelman.github.io/images/hex1.png" alt="Hex View 1" /></p>

<p>Next step was to explode the Jars and compare each of the files. This should a pretty apparent difference</p>

<p><img src="http://johnrengelman.github.io/images/hex2.png" alt="Hex View 2" /></p>

<p>There was a binary difference in the class file produced by subsequent compilations. The difference was related to a filed named <code>__timestamp_239_neverHappen1387492963633</code></p>

<p>That&rsquo;s an interesting field, because there&rsquo;s nothing like that in my source file:</p>

<div><script src='https://gist.github.com/8055368.js?file=EchoApp.groovy'></script>
<noscript><pre><code>package john.app

import john.lib.EchoUtil

class EchoApp {

    public static void main(String[] args) {
        args.each {
            EchoUtil.echo(it)
        }
    }
}</code></pre></noscript></div>


<p>Opening the <code>.class</code> file with a Java Decompiler (JD-GUI in this case), we see this for the class:</p>

<div><script src='https://gist.github.com/8055368.js?file=EchoApp.class'></script>
<noscript><pre><code>package john.app;

import groovy.lang.Closure;
import groovy.lang.GroovyObject;
import groovy.lang.MetaClass;
import john.lib.EchoUtil;
import org.codehaus.groovy.runtime.GeneratedClosure;
import org.codehaus.groovy.runtime.callsite.CallSite;

public class EchoApp
  implements GroovyObject
{
  public EchoApp()
  {
    EchoApp this;
    CallSite[] arrayOfCallSite = $getCallSiteArray();
    MetaClass localMetaClass = $getStaticMetaClass();
    this.metaClass = localMetaClass;
  }

  public static void main(String[] args)
  {
    CallSite[] arrayOfCallSite = $getCallSiteArray(); arrayOfCallSite[0].call(args, new _main_closure1(EchoApp.class)); } 
  static { __$swapInit();
    long l1 = 0L;
    __timeStamp__239_neverHappen1387493347537 = l1;
    long l2 = 1387493347537L; } 
  class _main_closure1 extends Closure implements GeneratedClosure { public _main_closure1(Object _thisObject) { super(_thisObject); } 
    public Object doCall(Object it) { CallSite[] arrayOfCallSite = $getCallSiteArray(); return arrayOfCallSite[0].call(EchoUtil.class, it);
    }

    public Object doCall()
    {
      CallSite[] arrayOfCallSite = $getCallSiteArray();
      return doCall(null);
    }

    static
    {
      __$swapInit();
    }
  }
}</code></pre></noscript></div>


<p>There is in fact a private variable being initialized. Opening the other copy of this class revealed that the name of this variable was changing:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">__timeStamp__239_neverHappen1387493347537</span> <span class="o">=</span> <span class="n">l1</span><span class="o">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>vs.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">__timeStamp__239_neverHappen1387492963633</span> <span class="o">=</span> <span class="n">l1</span><span class="o">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Hmmm. That&rsquo;s odd. A little more digging lead me to this <a href="https://jira.codehaus.org/browse/GROOVY-6308">Groovy-6308</a> - Timestamps in bytecode prevents baselining of code. The title of this bug is &ldquo;Timestamps in bytecode prevents baselining of code&rdquo;. Yup, this seems to be my problem.</p>

<p>It appears this field is injected as some sort of addition to <code>SerialVersionUUID</code>, though the corresponding conversations of that bug and the related bugs seems to indicate that it&rsquo;s not really used for anything.</p>

<p>Unfortunately, the bugs are listed as being targeted for Groovy 3.0 which doesn&rsquo;t help me in the near term.</p>

<p>At this point, since it&rsquo;s a compiler function that&rsquo;s stopping me, I&rsquo;m not sure I have a path forward. This will probably get back burnered for a while since it&rsquo;s not critical and more of a thought experiment than anything.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Reproducible Multi-Project Gradle builds]]></title>
    <link href="http://johnrengelman.github.io/blog/2013/12/17/reproducible-multi-project-gradle-builds/"/>
    <updated>2013-12-17T10:06:46-06:00</updated>
    <id>http://johnrengelman.github.io/blog/2013/12/17/reproducible-multi-project-gradle-builds</id>
    <content type="html"><![CDATA[<p>Lately I&rsquo;ve been working on a way to create a reproducible build of my application source using Gradle. And by reproducible, I mean, when I run the md5 or sha256 checksum on the resulting files, I get the same results.</p>

<p>This is a bit more complicate then I originally thought. The issue is that inherently, a Java Jar file includes the timestamp information for the files contained within. So, if you build a Jar and checksum it and then clean and rebuilt the Jar, even though the files are semantically identical, the resulting checksum&rsquo;s will be different.</p>

<p>This is a problem in Continuous Integration/Deployment environments where you may be building from a clean VCS checkout every time but want to know only about the things that changed.</p>

<!-- more -->


<p>Working around this in Gradle is a bit of mind twister. After thinking about this for a couple days, I&rsquo;ve come up with this list of items that need to addressed to successfully accomplish what I&rsquo;m trying to do.</p>

<ol>
<li>Calculate a single timestamp for each artifact that Gradle produces</li>
<li>Timestamp calculation needs to be sensitive to the Gradle project that produces the artifact.</li>
<li>Timestamp calculation needs to be sensitive to any Gradle project dependencies for the project producing the artifact.</li>
<li>Modify the resulting artifact to set the timestamp information for contents uniformly.</li>
</ol>


<p>After a quick Twitter conversation with <a href="http://twitter.com/ldaley">Luke Daley</a>, item 4 was knocked out by using Java&rsquo;s <code>ZipFile</code> API to iterate over the jar&rsquo;s contents and set the <code>lastModified</code> timestamp to a value, but that leaves the more critical timestamp calculations.</p>

<p>Let&rsquo;s start with a mind experiment to figure out what we need. Let&rsquo;s assume we have the following Gradle project structure:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>myApp
</span><span class='line'>  |- utils
</span><span class='line'>  |- app</span></code></pre></td></tr></table></div></figure>


<p>This is a simple Gradle multi-project build where we have the application as one project and a utility library as another.</p>

<p>We check this code out and run a <code>./gradlew build</code> and calculate an MD5 checksum on <code>utils.jar</code> and <code>app.jar</code>:</p>

<table>
<thead>
<tr>
<th style="text-align:center;">   File    </th>
<th style="text-align:center;"> Checksum </th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center;"> utils.jar </td>
<td style="text-align:center;">    A     </td>
</tr>
<tr>
<td style="text-align:center;">  app.jar  </td>
<td style="text-align:center;">    B     </td>
</tr>
</tbody>
</table>


<p>If I make a change to the <code>app</code> project and do a <code>./gradlew clean build</code>, we want the following to happen:</p>

<table>
<thead>
<tr>
<th style="text-align:center;">   File    </th>
<th style="text-align:center;"> Checksum </th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center;"> utils.jar </td>
<td style="text-align:center;">    A     </td>
</tr>
<tr>
<td style="text-align:center;">  app.jar  </td>
<td style="text-align:center;">    B&#8217;    </td>
</tr>
</tbody>
</table>


<p>In this scenario, only the <code>app.jar</code> checksum would change because the <code>utils</code> project is functionally equivalent.</p>

<p>However, if we start from our initial commit and change the <code>utils</code> project and do a <code>./gradlew clean build</code>, we want the following to happen:</p>

<table>
<thead>
<tr>
<th style="text-align:center;">   File    </th>
<th style="text-align:center;"> Checksum </th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center;"> utils.jar </td>
<td style="text-align:center;">    A&#8217;    </td>
</tr>
<tr>
<td style="text-align:center;">  app.jar  </td>
<td style="text-align:center;">    B&#8217;    </td>
</tr>
</tbody>
</table>


<p>In this case with only a change to <code>utils</code>, we want both checksums to change because the <code>app</code> project is dependent upon the changed code in the utils library.</p>

<p>My initial thought was to use my VCS to get a timestamp for the latest change to the Gradle project being built. This would couple my build to the VCS being used, but that&rsquo;s an okay dependency in my opinion. Alternatively, the build could scan over the source contents and get the latest <code>lastModified</code> timestamp of any file contained within.</p>

<p>Neither of these solutions would solve the issue with upstream libraries however. Somehow, we need to propagate the upstream project&rsquo;s information.</p>

<p>I&rsquo;m not sure there is a <em>nice</em> way to do this, but my current thinking is to simulate this meta information by enforcing a commit to downstream projects when an upstream is modified. In my particular case, I would likely change the project&rsquo;s version of the upstream library by modifying the <code>build.gradle</code> file in that project. I could add a task that verifies that the downstream project has a version that is <em>at least</em> equivalent to any upstream projects&#8217; versions. This could run as part of the standard build process. This would force a change to the downstream&rsquo;s <code>build.gradle</code> thus indirectly updating the timestamp the VCS would report for that project.</p>

<p>All of this is theoretical at this point, I&rsquo;ve only started working on an implementation. I&rsquo;ll update this post as I learn more.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Change of heart....]]></title>
    <link href="http://johnrengelman.github.io/blog/2013/10/08/change-of-heart/"/>
    <updated>2013-10-08T13:54:00-05:00</updated>
    <id>http://johnrengelman.github.io/blog/2013/10/08/change-of-heart</id>
    <content type="html"><![CDATA[<p>As I was adding a new post today, I noticed an old post of mine that I had migrated from my old blog to this one about using IntelliJ and comparing it with STS. It&rsquo;s a little over 2 years old and in it I make the statement &ldquo;STS which is based on Eclipse, which I consider to be the premier Java IDE&rdquo;.</p>

<p>At the time, I was just starting my new job after 7 years with a large company where I primarily used Eclipse as my development tool on vanilla Java projects. And though I did really Eclipse at the time and was frustrated for quite a while with IntelliJ&rsquo;s performance, I have to clarify that it&rsquo;s is not my stance anymore.</p>

<p>Here&rsquo;s the thing, I haven&rsquo;t used Eclipse or STS for more than ~3mins in the last 2 &frac12; years, so I cannot personally attest to its performance or usability. However, in the last 2 &frac12; years, IntelliJ (I started with version 9 and am now using the 13 EAP) has come a long way. it&rsquo;s performance is dramatically better. I&rsquo;m faster using it now and I love the improvements with respect to Gradle integration they&rsquo;ve been bringing in.</p>

<p>I&rsquo;m not going to promote one over the other like I said because I don&rsquo;t have enough usage of Eclipse recently to make a comparison and don&rsquo;t really have the time or desire to look at it any time soon. So I&rsquo;ll just leave it at that.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Creating self-contained, executable jars with Gradle and Shadow]]></title>
    <link href="http://johnrengelman.github.io/blog/2013/10/08/creating-self-contained-executable-jars-with-gradle-and-shadow/"/>
    <updated>2013-10-08T13:43:54-05:00</updated>
    <id>http://johnrengelman.github.io/blog/2013/10/08/creating-self-contained-executable-jars-with-gradle-and-shadow</id>
    <content type="html"><![CDATA[<p>I originally posted this over on <a href="http://www.objectpartners.com">objectpartners.com</a> (2013/07/16)</p>

<p>Deploying Java applications that are not hosted in an application container (such as a WAR or EAR) can be a pain due to classpath dependencies. This is especially true when using a micro-service framework such as Dropwizard. Using Gradle and the Shadow plugin, applications can be packaged up into a single jar and distributed to your production environments with one file.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Profiling Grails Applications With VisualVM]]></title>
    <link href="http://johnrengelman.github.io/blog/2013/03/25/profiling-grails-applications-with-visualvm/"/>
    <updated>2013-03-25T08:55:00-05:00</updated>
    <id>http://johnrengelman.github.io/blog/2013/03/25/profiling-grails-applications-with-visualvm</id>
    <content type="html"><![CDATA[<p>I originally posted this over on <a href="http://www.objectpartnets.com">objectpartners.com</a> (2013/01/25)</p>

<p>Profiling Grails applications can be a real pain due to many reasons: large heap and perm-gen requirements due to Groovy, class reloading, overhead of Grails itself.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Recovering from Merge Errors in Mercurial with Sub-Repositories and Named Branches]]></title>
    <link href="http://johnrengelman.github.io/blog/2013/03/25/recovering-from-merge-errors-in-mercurial-with-sub-repositories-and-named-branches/"/>
    <updated>2013-03-25T08:51:00-05:00</updated>
    <id>http://johnrengelman.github.io/blog/2013/03/25/recovering-from-merge-errors-in-mercurial-with-sub-repositories-and-named-branches</id>
    <content type="html"><![CDATA[<p>I originally posted this post over on <a href="http://www.objectpartners.com">objectpartners.com</a>(2013/03/08)</p>

<p>This client used Mercurial and sub repositories (though they&rsquo;ve finally changed to Git and Artifactory) to manage their code base and this caused some issues every so often with a team of 20 developers.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[New Blog. Hooray!]]></title>
    <link href="http://johnrengelman.github.io/blog/2013/03/25/new-blog-hooray/"/>
    <updated>2013-03-25T08:32:00-05:00</updated>
    <id>http://johnrengelman.github.io/blog/2013/03/25/new-blog-hooray</id>
    <content type="html"><![CDATA[<p>So I&rsquo;ve decided to switch my blog over from a Wordpress sited hosted on a server in my basement to Tumblr. I don&rsquo;t blog that much, but I want to do more and I don&rsquo;t really want the responsibility of maintaining the server. Also, I want to keep my technical posts and my more mundane posts separate.</p>

<p>I&rsquo;m going to republish some old posts of mine to this blog. I&rsquo;m also going to republish some blog posts from my <a href="http://www.objectpartners.com">Object Partners</a> blog here as well.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Contributing to Grails-Core with IntelliJ IDEA 11]]></title>
    <link href="http://johnrengelman.github.io/blog/2012/01/16/contributing-to-grails-core-with-intellij-idea-11/"/>
    <updated>2012-01-16T08:45:00-06:00</updated>
    <id>http://johnrengelman.github.io/blog/2012/01/16/contributing-to-grails-core-with-intellij-idea-11</id>
    <content type="html"><![CDATA[<p>I&rsquo;ve recently started to work on contributing patches to the Grails Framework project. I&rsquo;ve been lucky enough to be working for a client that is ok with using the latest versions of Grails for its back-end applications, so I&rsquo;ve been able to play around a lot with Grails 2.0.0 since it&rsquo;s release at the end of last year. However, this has resulted in me encountering a number of unexpected/irritating bugs that have sometimes prevented code from being migrated &ldquo;as-is&rdquo;. So, I&rsquo;ve decided to try and learn and contribute back by working on some bugs myself.</p>

<p>If you&rsquo;re looking to contribute yourself, start here <a href="http://grails.org/Contribute.">http://grails.org/Contribute.</a> I didn&rsquo;t have any issues getting up and running with my own fork of grails-core. I did have to execute a <code>./gradlew compile</code> task though before I was able to get any test to execute&hellip;and don&rsquo;t worry, when this takes a while. There are <strong>A LOT</strong> of dependencies to download.</p>

<p>My next step was to start using IntelliJ 11 since it would allow me to quickly debug failing tests, so I again returned to the grails.org website and found the executing the <code>./gradlew idea</code> task will produce the necessary IntelliJ project files&hellip;Excellent. But this is where the problems started.</p>

<p>First, I had to open the Module Settings for <code>grails-script</code> and remove the entry under &lsquo;Source Folders&rsquo;. This was causing IntelliJ to not save any edits I made to the module properties. It appears that this entry isn&rsquo;t needed anyway (and I haven&rsquo;t run into any issues with it yet).</p>

<p>Second, the project wouldn&rsquo;t compile because the following 2 classes couldn&rsquo;t be found:<code>com.springsource.loaded.ReloadEventProcessorPlugin</code> and <code>com.springsource.loaded.Plugins</code>. After some searching, I found the <code>springloaded-core-1.0.2.jar</code> in my Gradle User Home (<code>~/.gradle</code>) directory (look under <code>~/.gradle/caches/artifacts-7</code>, it maybe be something different then <code>artifact-7</code>). I copied this jar to my home directory, opened the Module Settings for <code>grails-core-grails-core</code> and added a Jar Dependency that pointed to the <code>springloaded-core-1.0.2.jar</code> in my home directory.</p>

<p>Third, the <code>grails-plugin-validation</code> module won&rsquo;t compile because it was missing a dependency to the <code>grails-web</code> module. Again, I opened the Module Settings for <code>grails-plugin-validation</code> and added a Module Dependency to <code>grails-web</code>.</p>

<p>Now, I can finally run and debug my tests and get working on some patches.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[Updated] Eclipse STS vs IntelliJ IDEA for Grails Development]]></title>
    <link href="http://johnrengelman.github.io/blog/2011/04/20/updated-eclipse-sts-vs-intellij-idea-for-grails-development/"/>
    <updated>2011-04-20T08:43:00-05:00</updated>
    <id>http://johnrengelman.github.io/blog/2011/04/20/updated-eclipse-sts-vs-intellij-idea-for-grails-development</id>
    <content type="html"><![CDATA[<p>So, I have become increasingly frustrated with IntelliJ for doing Grails development. I know. Everyone swears by it being &ldquo;THE&rdquo; IDE for Grails work, but I just can&rsquo;t get on that boat. Not only do I find the UI a total cluster-fuck and it nearly impossible to find the information that I want on the screen when I want it, but it is also a serious resource hog.</p>

<!-- more -->


<p>I have a brand new Sandy Bridge, Quad-Core Macbook Pro with 4 GB of RAM and I&rsquo;m constantly fighting with IntelliJ when it&rsquo;s doing something. This is my machine on any given day: iTunes, Twitter Client, Skype Client, Chrome (w/ 4 open tabs), Firefox (maybe), and IntelliJ&hellip;that&rsquo;s it. That&rsquo;s all I have running. There are a couple background apps (Dropbox, TunnelBlick SSH) but that&rsquo;s really all that I have running&hellip;yet I still have to constantly wait for IntelliJ to do things&hellip;I get the stupid beach ball, wait-while-I-inexplicably-tie-up-4-core-and-4-GB-of-RAM-for-no-damn-reason icon. UGH. So frustrating. Not to mention, IntelliJ&rsquo;s inability to perform the simplest in task in Subversion without you having to walk away for 10 mins while it does it.</p>

<p>So I&rsquo;ve decided on a little experiment. SpringSource recently released version 2.6.0-SR1 of their STS tool set. STS is build on top of the Eclipse&hellip;what I consider the premiere Java IDE. So I&rsquo;m installing. And I&rsquo;m going to see if I can get some work done in STS for the rest of the week. And next week, I&rsquo;ll come back to this post with some thoughts and a final decision on what I&rsquo;m going to use.</p>

<h2>Initial Impressions</h2>

<p>I installed STS without any problems on my machine, but quickly found that I needed some items to get up and running. Surprise, surprise. First, you need to install/activate the Grails support for STS. This is done from the STS Dashboard when the application first starts up. I should have remembered this since a co-worker wrote an article about STS/Grails not to long ago: <a href="http://www.objectpartners.com/2011/02/15/start-using-eclipse-with-grails-support-via-sts/">Start Using Eclipse with Grails Support via STS</a>.</p>

<p>Done. Next step, get my project from SVN. Fail. Apparently STS doesn&rsquo;t ship with Subclipse installed by default. Really not that big of a surprise, since Eclipse doesn&rsquo;t either. Just another annoyance.</p>

<h2>Development</h2>

<p>After finally getting my project checked out and configuring some additional source folders so Eclipse could find all the Groovy classes, I got up a running. Yet there was one nagging issue I couldn&rsquo;t seem to resolve. Apparently STS applies Java Code checks to Groovy files. In most cases this is valid, since Groovy is built on top of Java. However, STS kept finding one error that really annoyed me (disclaimer: I know the following code example is actually bad code. It&rsquo;s not mine. I also know how to fix it, but I&rsquo;m not going to since it&rsquo;s production code. Plus, it&rsquo;s valid in Groovy for whatever reason).</p>

<h2>End Game</h2>

<p>It appears that STS still has some work to do with Groovy syntax support. Or maybe some way to adjust which Java Checks are applied to .groovy files. I&rsquo;m still playing, but in the meantime, I&rsquo;ve upgraded my machine to 8GB of RAM and IntelliJ is performing much better&hellip;crazy, that I need 8GB to get good performance, but oh well.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[IntelliJ 10 Tuning]]></title>
    <link href="http://johnrengelman.github.io/blog/2011/04/01/intellij-10-tuning/"/>
    <updated>2011-04-01T08:42:00-05:00</updated>
    <id>http://johnrengelman.github.io/blog/2011/04/01/intellij-10-tuning</id>
    <content type="html"><![CDATA[<p>I&rsquo;ve recently switched over to using IntelliJ IDEA for doing Groovy/Grails development. It&rsquo;s been a couple weeks and after 6 years of using Eclipse, I&rsquo;m still feeling the pain a bit.</p>

<p>On top of a new IDE, I&rsquo;m now developing primarily on my new MacBook Pro. So that&rsquo;s adding to the transition. My biggest problem has been the slowness of IntelliJ. It randomly just locks up for a few minutes before continuing on.</p>

<p>So, I did what any normal software developer would do: I turned to Google for the answer. I very quickly found this little page: <a href="http://blog.amber.org/2010/12/intellij-idea-10-performance-on-mac-os-x">IntelliJ IDEA 10 performance on Mac</a>. Thanks to <a href="http://blog.amber.org/about/">Chris</a> and a couple other random postings (one key info was to turn off the vast selection of IDEA plugins that are enabled by default and aren&rsquo;t used), I got my system running much, much, much faster.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[GoDaddy DNS & Wordpress Multisite]]></title>
    <link href="http://johnrengelman.github.io/blog/2011/03/07/godaddy-dns-wordpress-multisite/"/>
    <updated>2011-03-07T08:40:00-06:00</updated>
    <id>http://johnrengelman.github.io/blog/2011/03/07/godaddy-dns-wordpress-multisite</id>
    <content type="html"><![CDATA[<p>Tonight, I decided to setup a multisite configuration for my Wordpress installation (which you are reading right now). My sister is involved in marketing and advertising and wanted to start her own blog. I figured this was a good opportunity to play with the server some more.</p>

<!-- more -->


<p>I decided to use the Subdomain configuration and the instructions found <a href="http://codex.wordpress.org/Create_A_Network">here</a>. Only, initially, I didn&rsquo;t want to apply a blanket <code>*.johnrengelman.com</code> DNS redirect. I don&rsquo;t know why I didn&rsquo;t want to do this. It was an arbitrary decision on my part. An arbitrary decision that ended up costing me about 2 hours tonight :frowning:</p>

<p>Somehow, as I was configuring the DNS entries (using GoDaddy&rsquo;s DNS Manager), I messed up something. After completing the installation in Wordpress, I couldn&rsquo;t reach my sister&rsquo;s <a href="http://amanda.johnrengelman.com">site</a>. I could open any other sub-domain which would redirect to my homepage.</p>

<p>After backtracking and restoring backups and reinstalling, I still couldn&rsquo;t open the site. The confusing part is that <code>nslookup</code> resolved the address correctly, but <code>ping</code> couldn&rsquo;t reach my server. :confused: Very confusing.</p>

<p>It appears that some entry I placed into the DNS records propagated out and wasn&rsquo;t immediately updated when I entered new settings. I decided to give up for a few minutes and when I came back, everything was working. Ugh. Server work is very frustrating at times.</p>
]]></content>
  </entry>
  
</feed>
